{"version":3,"sources":["Components/Chat/ChatHeader.jsx","Components/Chat/Message.jsx","features/userSlice.js","features/appSlice.js","firebase.js","Chat.js","Components/Sidebar/SidebarChannel.jsx","Sidebar.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","id","channelName","className","placeholder","Message","message","timestamp","user","Avatar","src","photo","displayName","Date","toDate","toUTCString","userSlice","createSlice","name","initialState","reducers","login","state","action","payload","logout","actions","selectUser","appSlice","channelId","setChannelInfo","selectChannelId","app","selectChannelName","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","useSelector","useState","input","setInput","messages","setMessages","useEffect","a","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","handleSubmit","e","preventDefault","add","FieldValue","serverTimestamp","msg","fontSize","disabled","type","onChange","target","value","onClick","SidebarChannel","dispatch","useDispatch","Sidebar","channels","setChannels","console","log","channel","prompt","InfoOutlined","signOut","uid","substring","Login","alt","Button","signInWithPopup","catch","err","alert","window","location","App","onAuthStateChanged","authUser","photoURL","email","store","configureStore","reducer","userReducer","appReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4949129c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './css/chat_header.css'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\n\r\nfunction ChatHeader({id,channelName}) {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader__left\">\r\n                <h3>\r\n                    <span className=\"chatHeader__hash\">#</span>{channelName}\r\n                </h3>\r\n            </div>\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon />\r\n                <EditLocationRoundedIcon />\r\n                <PeopleAltRoundedIcon />\r\n\r\n                <div className=\"chatHeader__search\">\r\n                    <input placeholder=\"Search\"/>\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './css/Message.css'\r\nfunction Message({message=\"somthin\", timestamp=\"time\", user}) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo} />\r\n            <div className=\"message__info\">\r\n                <h4>\r\n                    {user.displayName}\r\n                    <span className=\"message__timestamp\">\r\n                        {new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4>\r\n                <p>\r\n                    {message}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Message\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState : {\n    user:null\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state, action) =>{\n      state.user = null\n    }\n  }\n});\n\nexport const { login, logout } = userSlice.actions;\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState : {\r\n    channelId:null,\r\n    channelName:null\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\nexport default appSlice.reducer;","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDAj7sBoIYIYvv5p7EOghre_4JZ05ojvYU\",\r\n    authDomain: \"discord-clone-bac9a.firebaseapp.com\",\r\n    projectId: \"discord-clone-bac9a\",\r\n    storageBucket: \"discord-clone-bac9a.appspot.com\",\r\n    messagingSenderId: \"1032110303724\",\r\n    appId: \"1:1032110303724:web:644c4d5442fd751b6278c9\",\r\n    measurementId: \"G-NXDPGX1R7Q\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\nconst db = firebase.firestore()\r\nconst auth = firebase.auth()\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\n\r\nexport { auth, provider }\r\nexport default db","import React, { useState, useEffect } from 'react'\r\nimport './Chat.css'\r\nimport ChatHeader from './Components/Chat/ChatHeader'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\r\nimport GifIcon from '@material-ui/icons/Gif';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport Message from './Components/Chat/Message';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport { selectChannelId, selectChannelName } from './features/appSlice';\r\nimport db from './firebase';\r\nimport firebase from 'firebase'\r\n\r\nfunction Chat() {\r\n\r\n    const user = useSelector(selectUser)\r\n    const channelId = useSelector(selectChannelId)\r\n    const channelName = useSelector(selectChannelName)\r\n    const [input, setInput] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(async () => {\r\n        if (channelId) {\r\n            db.collection(\"channels\")\r\n                .doc(channelId)\r\n                .collection(\"messages\")\r\n                .orderBy('timestamp', 'desc')\r\n                .onSnapshot(snapshot => {\r\n                    setMessages(snapshot.docs.map((doc) => doc.data()))\r\n                })\r\n        }\r\n\r\n    }, [channelId])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        await db.collection(\"channels\")\r\n            .doc(channelId)\r\n            .collection('messages')\r\n            .add({\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                message: input,\r\n                user: user\r\n            })\r\n\r\n        setInput(\"\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader key={channelId} id={channelId} channelName={channelName} />\r\n            <div className=\"chat__messages\">\r\n                {\r\n                    messages.map((msg) => {\r\n                        return <Message \r\n                        key={msg.id} \r\n                        message={msg.message} \r\n                        timestamp={msg.timestamp}\r\n                        user={msg.user}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n            <div className=\"chat__input\">\r\n                <AddCircleIcon fontSize=\"large\" />\r\n                <form>\r\n                    <input disabled={!channelId} type=\"text\" onChange={(e) => setInput(e.target.value)} value={input} placeholder={`message #${channelName}`} />\r\n                    <button onClick={e => handleSubmit(e)} className=\"chat__inputButton\" type=\"submit\">\r\n                        Send Message\r\n                    </button>\r\n                </form>\r\n\r\n                <div className=\"chat__inputIcons\">\r\n                    <CardGiftcardIcon fontSize=\"large\" />\r\n                    <GifIcon fontSize=\"large\" />\r\n                    <EmojiEmotionsIcon fontSize=\"large\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setChannelInfo } from '../../features/appSlice'\r\nimport './css/sidebar_channel.css'\r\n\r\nfunction SidebarChannel({id, channelName}) {\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <div className=\"sidebarChannel\" onClick={() => dispatch(setChannelInfo({\r\n            channelId:id, \r\n            channelName:channelName\r\n        }))}>\r\n            <h4>\r\n                <span className=\"sidebarChannel__hash\">#</span>\r\n                {channelName}\r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Sidebar.css'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './Components/Sidebar/SidebarChannel';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport { InfoOutlined } from '@material-ui/icons';\r\nimport { Avatar } from '@material-ui/core';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/HeadsetMic';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport db, { auth } from './firebase';\r\n\r\nfunction Sidebar() {\r\n    const user = useSelector(selectUser)\r\n    const [channels,setChannels] = useState([])\r\n\r\n    useEffect(()=>{\r\n        db.collection(\"channels\").onSnapshot(snapshot => {\r\n            setChannels(snapshot.docs.map(doc => {\r\n                console.log(doc);\r\n                return {\r\n                    id:doc.id,\r\n                    channel:doc.data()\r\n                }\r\n        }))\r\n        })\r\n    },[])\r\n\r\n\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt(\"Enter Channel Name\")\r\n\r\n        if(channelName) {\r\n            db.collection(\"channels\").add({\r\n                channelName: channelName,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                Ovyas24\r\n                <ExpandMoreIcon />\r\n            </div>\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channel</h4>\r\n                    </div>\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n                </div>\r\n                <div className=\"sidebar__channelList\">\r\n                    {\r\n                        channels.map(({id, channel}) => {\r\n                            return <SidebarChannel key={id} id={id} channelName={channel.channelName} />\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltIcon\r\n                    className=\"sidebar__voiceIcon\"\r\n                    fontSize=\"large\"\r\n                />\r\n\r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoOutlined />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar \r\n                    onClick={() => auth.signOut()}\r\n                    src={user.photo} \r\n                />\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring(0,5)}</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Login.css'\r\nimport { auth, provider } from './firebase'\r\n\r\n\r\nfunction Login() {\r\n    const signIn = () => {\r\n        //login\r\n        auth.signInWithPopup(provider).catch(err => alert(err.message))\r\n    }\r\n\r\n    const redirectGithub = () => {\r\n        window.location = \"https://github.com/ovyas24/discord-with-react\"\r\n    } \r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__logo\">\r\n                <img src=\"https://maxcdn.icons8.com/Share/icon/Logos/discord_logo1600.png\" alt=\"Discord\"/>\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Discord_Color_Text_Logo.svg/1280px-Discord_Color_Text_Logo.svg.png\" alt=\"\"/>\r\n            </div>\r\n            {/* <div className=\"login__logo\">\r\n            </div> */}\r\n            <Button onClick={signIn}>Sign In</Button>\r\n            <br />\r\n            <Button onClick={redirectGithub}>Check out Code</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport Chat from './Chat';\nimport Sidebar from './Sidebar';\nimport { login,logout, selectUser }from './features/userSlice'\nimport Login from './Login';\nimport { auth } from './firebase';\n\nfunction App() {\n  const dispatch = useDispatch()\n  const user = useSelector(selectUser)\n\n  useEffect(()=>{\n    auth.onAuthStateChanged((authUser)=>{\n      if(authUser){\n        //user is logged in\n        dispatch(login({\n          uid:authUser.uid,\n          photo:authUser.photoURL,\n          email:authUser.email,\n          displayName:authUser.displayName\n        }))\n      }else{\n        // user is logged out\n        console.log(\"no data\");\n        dispatch(logout())\n      }\n    })\n  },[dispatch])\n\n  return (\n    <div className=\"app\">\n      {\n        user ? (\n          <>\n            <Sidebar />\n            <Chat />\n          </>\n        ): <Login />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport appReducer from '../features/appSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer\n  },\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}